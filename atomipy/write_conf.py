import os

def pdb(atoms, cell, file_path):
    """Write atoms and cell dimensions to a PDB file.

    Args:
       atoms: list of atom dictionaries.
       cell: 1x6 list [a, b, c, alpha, beta, gamma] or None.
       file_path: output filepath.
    """
    with open(file_path, 'w') as f:
        if cell is not None:
            # Write CRYST1 record; formatted width according to PDB spec
            a, b, c, alpha, beta, gamma = cell
            f.write(f"CRYST1{a:9.3f}{b:9.3f}{c:9.3f}{alpha:7.2f}{beta:7.2f}{gamma:7.2f} P 1           1\n")
        for atom in atoms:
            # Format the ATOM record: using index, resname and coordinates
            index = atom.get('index', 0)
            resname = atom.get('resname', 'UNK')
            x = atom.get('x', 0.0)
            y = atom.get('y', 0.0)
            z = atom.get('z', 0.0)
            # Use element if available, else guess from resname
            element = atom.get('element') if atom.get('element') is not None else resname[0]
            # Get molecule ID from atom data, defaulting to 1 if not present
            molid = atom.get('molid', 1)
            # Standard PDB format for ATOM with proper molecule ID
            line = (f"ATOM  {index:5d} {resname:^4s} MOL A{molid:4d}    {x:8.3f}{y:8.3f}{z:8.3f}  1.00  0.00          {element:>2s}\n")
            f.write(line)
        f.write("END\n")


def gro(atoms, Box_dim, file_path):
    """Write atoms and box dimensions to a Gromacs .gro file.

    Gromacs .gro files store coordinates in nanometers (nm), but atomipy uses Angstroms (Å).
    This function automatically converts the coordinates and box dimensions from Å to nm.

    Args:
       atoms: list of atom dictionaries with coordinates in Angstroms.
       Box_dim: 1x9 list representing triclinic cell dimensions in Angstroms.
       file_path: output filepath.
    """
    # Conversion factor from Angstroms to nm
    angstrom_to_nm = 0.1
    
    with open(file_path, 'w') as f:
        # Write title
        f.write("Generated by atomipy\n")
        # Write number of atoms
        f.write(f"{len(atoms)}\n")
        # Write each atom line with GRO format: residue number (5 chars), residue name (5 chars), atom name (5 chars), atom number (5 chars), x (8.3f), y (8.3f), z (8.3f) and optionally velocities vx, vy, vz (8.4f each)
        for i, atom in enumerate(atoms, start=1):
            # Use molid if available, otherwise default to 1
            resnum = atom.get('molid', 1)  # Use molecule ID as residue number in GRO format
            resname = atom.get('resname', 'UNK')
            
            # Use atom name if available, otherwise use element or first character of resname
            if 'atname' in atom and atom['atname']:
                atomname = atom['atname']
            else:    
                atomname = atom.get('element') if atom.get('element') is not None else resname[0]
                
            index = atom.get('index', i)
            
            # Convert coordinates from Angstroms to nm for .gro format
            x = atom.get('x', 0.0) * angstrom_to_nm
            y = atom.get('y', 0.0) * angstrom_to_nm
            z = atom.get('z', 0.0) * angstrom_to_nm
            
            # Check if velocities are present and convert them too
            vx = atom.get('vx', None)
            vy = atom.get('vy', None)
            vz = atom.get('vz', None)
            
            if vx is not None and vy is not None and vz is not None:
                # Convert velocities from Å/ps to nm/ps
                vx *= angstrom_to_nm
                vy *= angstrom_to_nm
                vz *= angstrom_to_nm
                line = f"{resnum:5d}{resname:<5s}{atomname:>5s}{index:5d}{x:8.3f}{y:8.3f}{z:8.3f}{vx:8.4f}{vy:8.4f}{vz:8.4f}\n"
            else:
                line = f"{resnum:5d}{resname:<5s}{atomname:>5s}{index:5d}{x:8.3f}{y:8.3f}{z:8.3f}\n"
                
            f.write(line)
            
        # Write box dimensions line; join numbers with space
        if Box_dim is not None:
            # Convert box dimensions from Angstroms to nm
            box_dim_nm = [val * angstrom_to_nm for val in Box_dim]
            box_str = ' '.join(f"{val:.5f}" for val in box_dim_nm)
            f.write(box_str + "\n")
        else:
            f.write("\n")


def auto(atoms, box, file_path):
    """Automatically choose the appropriate write function based on file extension.
    
    This function will analyze the file extension and call either write_pdb or write_gro
    based on the detected format.
    
    Args:
        atoms: List of atom dictionaries
        box: Either cell parameters for PDB (1x6 list) or Box_dim for GRO (1x9 list)
        file_path: Path for the output file
    """
    _, ext = os.path.splitext(file_path)
    ext = ext.lower()
    
    if ext == '.pdb':
        # For PDB, we need 1x6 cell format
        if box is not None and len(box) == 9:
            # Convert Box_dim to cell parameters if needed
            # This is a simplistic conversion and may not be accurate for all cases
            a = box[0]
            b = box[4]
            c = box[8]
            alpha = beta = gamma = 90.0  # Default to orthogonal
            cell = [a, b, c, alpha, beta, gamma]
        else:
            cell = box
        pdb(atoms, cell, file_path)
    elif ext == '.gro':
        # For GRO, we need 1x9 Box_dim format
        if box is not None and len(box) == 6:
            # Convert cell parameters to Box_dim if needed
            # This is a simplistic conversion assuming orthogonal cell
            a, b, c = box[0], box[1], box[2]
            Box_dim = [a, 0, 0, 0, b, 0, 0, 0, c]
        else:
            Box_dim = box
        gro(atoms, Box_dim, file_path)
    else:
        # Default to PDB if the extension is unrecognized
        pdb(atoms, box, file_path)
