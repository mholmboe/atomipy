import os


def write_atom_gro(atoms, Box_dim, file_path):
    """Write atoms and box dimensions to a Gromacs .gro file.

    Args:
       atoms: list of atom dictionaries.
       Box_dim: 1x9 list representing triclinic cell dimensions.
       file_path: output filepath.
    """
    with open(file_path, 'w') as f:
        # Write title
        f.write("Generated by write_atom_gro\n")
        # Write number of atoms
        f.write(f"{len(atoms)}\n")
        # Write each atom line with GRO format: residue number (5 chars), residue name (5 chars), atom name (5 chars), atom number (5 chars), x (8.3f), y (8.3f), z (8.3f) and optionally velocities vx, vy, vz (8.4f each)
        for i, atom in enumerate(atoms, start=1):
            resnum = 1  # default residue number
            resname = atom.get('resname', 'UNK')
            atomname = atom.get('element') if atom.get('element') is not None else resname[0]
            index = atom.get('index', i)
            x = atom.get('x', 0.0)
            y = atom.get('y', 0.0)
            z = atom.get('z', 0.0)
            # Check if velocities are present
            vx = atom.get('vx', None)
            vy = atom.get('vy', None)
            vz = atom.get('vz', None)
            if vx is not None and vy is not None and vz is not None:
                line = f"{resnum:5d}{resname:<5s}{atomname:>5s}{index:5d}{x:8.3f}{y:8.3f}{z:8.3f}{vx:8.4f}{vy:8.4f}{vz:8.4f}\n"
            else:
                line = f"{resnum:5d}{resname:<5s}{atomname:>5s}{index:5d}{x:8.3f}{y:8.3f}{z:8.3f}\n"
            f.write(line)
        # Write box dimensions line; join numbers with space
        if Box_dim is not None:
            box_str = ' '.join(f"{val:.5f}" for val in Box_dim)
            f.write(box_str + "\n")
        else:
            f.write("\n")
